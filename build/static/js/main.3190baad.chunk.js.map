{"version":3,"sources":["Components/Tarjetas/react.png","Components/Tarjetas/Tarjetas.jsx","Components/Navbar/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Tarjetas","header","src","imagen","alt","height","width","footer","label","href","target","title","subTitle","style","className","Navbar","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,mC,8OCkC5BC,MA5Bf,WACC,IAAMC,EAAS,yBAAKC,IAAKC,IAAQC,IAAI,OAAOC,OAAO,MAAMC,MAAM,QACzDC,EACL,8BACC,kBAAC,SAAD,CAAQC,MAAM,UACd,uBAAGC,KAAK,kCAAkCC,OAAO,UAChD,kBAAC,SAAD,CAAQF,MAAM,WAIjB,OACC,kBAAC,OAAD,CACCG,MAAM,gBACNC,SAAS,WACTC,MAAO,CAAEP,MAAO,SAChBQ,UAAU,OACVP,OAAQA,EACRN,OAAQA,GACR,yBAAKa,UAAU,aAAf,8O,MCTYC,MAZf,WACC,OACC,yBAAKD,UAAU,UACd,uBAAGA,UAAU,SAASL,KAAK,SAA3B,QAGA,uBAAGA,KAAK,kBAAR,iBACA,uBAAGA,KAAK,YAAR,cCwBYO,MA9Bf,WACC,OACC,oCACC,kBAAC,EAAD,MACA,yBAAKF,UAAU,iBACd,6BACC,kBAAC,EAAD,OAED,6BACC,kBAAC,EAAD,OAED,6BACC,kBAAC,EAAD,QAGF,yBAAKA,UAAU,iBACd,6BACC,kBAAC,EAAD,OAED,6BACC,kBAAC,EAAD,OAED,6BACC,kBAAC,EAAD,UCfeG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3190baad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/react.b552b736.png\";","import React from \"react\";\nimport { Card } from \"primereact/card\";\nimport { Button } from \"primereact/button\";\nimport imagen from \"./react.png\";\nimport \"./styles/styles.css\";\n\nfunction Tarjetas() {\n\tconst header = <img src={imagen} alt='Card' height='100' width='100' />;\n\tconst footer = (\n\t\t<span>\n\t\t\t<Button label='Learn' />\n\t\t\t<a href='https://drive.google.com/drive/' target='_blank'>\n\t\t\t\t<Button label='Site' />\n\t\t\t</a>\n\t\t</span>\n\t);\n\treturn (\n\t\t<Card\n\t\t\ttitle='Advanced Card'\n\t\t\tsubTitle='Subtitle'\n\t\t\tstyle={{ width: \"360px\" }}\n\t\t\tclassName='card'\n\t\t\tfooter={footer}\n\t\t\theader={header}>\n\t\t\t<div className='contenido'>\n\t\t\t\tLorem ipsum dolor sit amet, consectetur adipisicing elit.\n\t\t\t\tInventore sed consequuntur error repudiandae numquam deserunt\n\t\t\t\tquisquam repellat libero asperiores earum nam nobis, culpa\n\t\t\t\tratione quam perferendis esse, cupiditate neque quas!\n\t\t\t</div>\n\t\t</Card>\n\t);\n}\n\nexport default Tarjetas;\n","import React from \"react\";\nimport \"./style/style.css\";\n\nfunction Navbar() {\n\treturn (\n\t\t<div className='topnav'>\n\t\t\t<a className='active' href='#home'>\n\t\t\t\tHome\n\t\t\t</a>\n\t\t\t<a href='#documentacion'>Documentacion</a>\n\t\t\t<a href='#contact'>Contacto</a>\n\t\t</div>\n\t);\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./AppStyles/App.css\";\nimport { Navbar, Tarjetas } from \"./Components\";\n\nfunction App() {\n\treturn (\n\t\t<>\n\t\t\t<Navbar />\n\t\t\t<div className='app-container'>\n\t\t\t\t<div>\n\t\t\t\t\t<Tarjetas />\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Tarjetas />\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Tarjetas />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className='app-container'>\n\t\t\t\t<div>\n\t\t\t\t\t<Tarjetas />\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Tarjetas />\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Tarjetas />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}