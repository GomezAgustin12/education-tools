{"version":3,"sources":["Components/Tarjetas/react.png","Components/Tarjetas/Tarjetas.jsx","Components/Navbar/Navbar.jsx","Components/Form/FormInputs/FormInputs.jsx","Components/Form/FormImg/FormImg.jsx","Components/Form/Form.jsx","Components/Views/home.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Tarjetas","useState","cards","setCards","useEffect","axios","get","then","res","data","console","log","header","src","imagen","alt","height","width","footer","label","href","target","title","subTitle","style","className","Navbar","FormInputs","subtitle","description","link","onChange","onSubmit","type","value","placeholder","event","onClick","FormImgInput","handleImageUpload","showImg","setShowImg","imge","setImge","display","name","element","file","files","reader","FileReader","addEventListener","result","base64string","readAsDataURL","Form","formObject","setFormObject","atribute","post","image","FormImg","Home","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,mC,kVC+C5BC,MAtCf,WAAqB,IAAD,EACOC,mBAAS,CAAC,KADjB,mBACZC,EADY,KACLC,EADK,KAGnBC,qBAAU,WACTC,IAAMC,IAAN,UANU,0CAMV,WAA0BC,MAAK,SAAAC,GAC9BL,EAASK,EAAIC,KAAKA,MAClBC,QAAQC,IAAIT,GACZQ,QAAQC,IAAIH,EAAIC,KAAKA,WAEpB,IAEH,IAAMG,EAAS,yBAAKC,IAAKC,IAAQC,IAAI,OAAOC,OAAO,MAAMC,MAAM,QACzDC,EACL,8BACC,kBAAC,SAAD,CAAQC,MAAM,UACd,uBAAGC,KAAK,kCAAkCC,OAAO,UAChD,kBAAC,SAAD,CAAQF,MAAM,WAIjB,OACC,kBAAC,OAAD,CACCG,MAAM,gBACNC,SAAS,WACTC,MAAO,CAAEP,MAAO,SAChBQ,UAAU,OACVP,OAAQA,EACRN,OAAQA,GACR,yBAAKa,UAAU,aAAf,8O,MCtBYC,MAZf,WACC,OACC,yBAAKD,UAAU,UACd,uBAAGA,UAAU,SAASL,KAAK,SAA3B,QAGA,uBAAGA,KAAK,QAAR,QACA,uBAAGA,KAAK,YAAR,c,gBCgCYO,G,MAvCI,SAAC,GAAD,IAClBC,EADkB,EAClBA,SACAN,EAFkB,EAElBA,MACAO,EAHkB,EAGlBA,YACAC,EAJkB,EAIlBA,KACAC,EALkB,EAKlBA,SACAC,EANkB,EAMlBA,SANkB,OAQlB,yBAAKP,UAAU,kBACd,yCACA,2BACCQ,KAAK,OACLC,MAAOZ,EACPa,YAAY,QACZJ,SAAU,SAAAK,GAAK,OAAIL,EAAS,QAASK,EAAMf,OAAOa,UAEnD,6CACA,2BACCD,KAAK,OACLC,MAAON,EACPO,YAAY,WACZJ,SAAU,SAAAK,GAAK,OAAIL,EAAS,WAAYK,EAAMf,OAAOa,UAEtD,+CACA,8BACCA,MAAOL,EACPM,YAAY,cACZJ,SAAU,SAAAK,GAAK,OAAIL,EAAS,cAAeK,EAAMf,OAAOa,UAEzD,wCACA,8BACCA,MAAOJ,EACPK,YAAY,OACZJ,SAAU,SAAAK,GAAK,OAAIL,EAAS,OAAQK,EAAMf,OAAOa,UAElD,4BAAQG,QAAS,SAAAD,GAAK,OAAIJ,EAASI,EAAMf,UAAzC,aCAaiB,G,MAnCM,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,kBAAwB,EACjBtC,oBAAS,GADQ,mBACxCuC,EADwC,KAC/BC,EAD+B,OAEvBxC,mBAAS,MAFc,mBAExCyC,EAFwC,KAElCC,EAFkC,KAuB/C,OACC,yBAAKlB,UAAU,qBAAqBe,SAAO,GAC1C,yBAAKf,UAAU,qBACd,yBAAKZ,IAAK6B,GAAc,GAAI3B,IAAI,kBAChC,yBAAKS,MAAO,CAAEoB,QAAQ,GAAD,OAAKJ,EAAU,OAAS,WAA7C,YAGD,2BAAOP,KAAK,OAAOY,KAAK,YAAYd,SA1BvB,SAAAe,GACd,IAAMC,EAAOD,EAAQzB,OAAO2B,MAAM,GAC5BC,EAAS,IAAIC,WAEfH,GACHE,EAAOE,iBAAiB,QAAQ,WAC/BR,EAAQM,EAAOG,QACfX,GAAW,GACXF,EAAkB,CACjBQ,OACAM,aAAcJ,EAAOG,YAIvBH,EAAOK,cAAcP,IAErBN,GAAW,SCsBCc,G,MAtCF,WAAO,IAAD,EACkBtD,mBAAS,IAD3B,mBACXuD,EADW,KACCC,EADD,KAuBlB,OACC,yBAAKhC,UAAU,QACd,kBAAC,EAAD,CACCH,MAAOkC,EAAWlC,MAClBM,SAAU4B,EAAW5B,SACrBC,YAAa2B,EAAW3B,YACxBC,KAAM0B,EAAW1B,KACjBC,SA3BuB,SAAC2B,EAAUxB,GAAX,OACzBuB,EAAc,eACVD,EADS,eAEXE,EAAWxB,MAyBXF,SAlBc,SAAAX,GAChBhB,IAAMsD,KAAN,UAhBU,0CAgBV,UAA2B,CAC1BrC,MAAOkC,EAAWlC,MAClBM,SAAU4B,EAAW5B,SACrBC,YAAa2B,EAAW3B,YACxBC,KAAM0B,EAAW1B,KACjB8B,MAAOJ,EAAWI,MAAMP,kBAcxB,kBAACQ,EAAD,CAActB,kBAxBU,SAAAqB,GACzBH,EAAc,eAAKD,EAAN,CAAkBI,WAC/BlD,QAAQC,IAAI6C,SCcCM,MA7Bf,WACC,OACC,oCACC,yBAAKrC,UAAU,iBACd,6BACC,kBAAC,EAAD,OAED,6BACC,kBAAC,EAAD,OAED,6BACC,kBAAC,EAAD,QAGF,yBAAKA,UAAU,iBACd,6BACC,kBAAC,EAAD,OAED,6BACC,kBAAC,EAAD,OAED,6BACC,kBAAC,EAAD,U,eCRUsC,MAZf,WACC,OACC,oCACC,kBAAC,EAAD,MACA,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWJ,IACjC,kBAAC,IAAD,CAAOE,KAAK,QAAQC,OAAK,EAACC,UAAWX,OCCrBY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvE,MAAK,SAAAwE,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxE,QAAQwE,MAAMA,EAAMC,c","file":"static/js/main.ed558259.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/react.b552b736.png\";","import React, { useEffect, useState } from \"react\";\nimport { Card } from \"primereact/card\";\nimport { Button } from \"primereact/button\";\nimport imagen from \"./react.png\";\nimport \"./styles/styles.css\";\nimport axios from \"axios\";\n\nconst url = \"https://educacion-remota.herokuapp.com/\";\n\nfunction Tarjetas() {\n\tconst [cards, setCards] = useState([{}]);\n\n\tuseEffect(() => {\n\t\taxios.get(`${url}/cards`).then(res => {\n\t\t\tsetCards(res.data.data);\n\t\t\tconsole.log(cards);\n\t\t\tconsole.log(res.data.data);\n\t\t});\n\t}, []);\n\n\tconst header = <img src={imagen} alt='Card' height='100' width='100' />;\n\tconst footer = (\n\t\t<span>\n\t\t\t<Button label='Learn' />\n\t\t\t<a href='https://drive.google.com/drive/' target='_blank'>\n\t\t\t\t<Button label='Site' />\n\t\t\t</a>\n\t\t</span>\n\t);\n\treturn (\n\t\t<Card\n\t\t\ttitle='Advanced Card'\n\t\t\tsubTitle='Subtitle'\n\t\t\tstyle={{ width: \"360px\" }}\n\t\t\tclassName='card'\n\t\t\tfooter={footer}\n\t\t\theader={header}>\n\t\t\t<div className='contenido'>\n\t\t\t\tLorem ipsum dolor sit amet, consectetur adipisicing elit.\n\t\t\t\tInventore sed consequuntur error repudiandae numquam deserunt\n\t\t\t\tquisquam repellat libero asperiores earum nam nobis, culpa\n\t\t\t\tratione quam perferendis esse, cupiditate neque quas!\n\t\t\t</div>\n\t\t</Card>\n\t);\n}\n\nexport default Tarjetas;\n","import React from \"react\";\nimport \"./style/style.css\";\n\nfunction Navbar() {\n\treturn (\n\t\t<div className='topnav'>\n\t\t\t<a className='active' href='#home'>\n\t\t\t\tHome\n\t\t\t</a>\n\t\t\t<a href='form'>Form</a>\n\t\t\t<a href='#contact'>Contacto</a>\n\t\t</div>\n\t);\n}\n\nexport default Navbar;\n","import React from \"react\";\nimport \"./styles/styles.css\";\n\nconst FormInputs = ({\n\tsubtitle,\n\ttitle,\n\tdescription,\n\tlink,\n\tonChange,\n\tonSubmit\n}) => (\n\t<div className='form-container'>\n\t\t<label>Title:</label>\n\t\t<input\n\t\t\ttype='text'\n\t\t\tvalue={title}\n\t\t\tplaceholder='Title'\n\t\t\tonChange={event => onChange(\"title\", event.target.value)}\n\t\t/>\n\t\t<label>Sub Title:</label>\n\t\t<input\n\t\t\ttype='text'\n\t\t\tvalue={subtitle}\n\t\t\tplaceholder='Subtitle'\n\t\t\tonChange={event => onChange(\"subtitle\", event.target.value)}\n\t\t/>\n\t\t<label>Description:</label>\n\t\t<textarea\n\t\t\tvalue={description}\n\t\t\tplaceholder='Description'\n\t\t\tonChange={event => onChange(\"description\", event.target.value)}\n\t\t/>\n\t\t<label>Link:</label>\n\t\t<textarea\n\t\t\tvalue={link}\n\t\t\tplaceholder='Link'\n\t\t\tonChange={event => onChange(\"link\", event.target.value)}\n\t\t/>\n\t\t<button onClick={event => onSubmit(event.target)}>Cargar</button>\n\t</div>\n);\n\nexport default FormInputs;\n","import React, { useState } from 'react';\nimport './styles/styles.css';\n\nconst FormImgInput = ({ handleImageUpload }) => {\n\tconst [showImg, setShowImg] = useState(false);\n\tconst [imge, setImge] = useState(null);\n\n\tconst getImg = element => {\n\t\tconst file = element.target.files[0];\n\t\tconst reader = new FileReader();\n\n\t\tif (file) {\n\t\t\treader.addEventListener('load', () => {\n\t\t\t\tsetImge(reader.result);\n\t\t\t\tsetShowImg(true);\n\t\t\t\thandleImageUpload({\n\t\t\t\t\tfile,\n\t\t\t\t\tbase64string: reader.result\n\t\t\t\t});\n\t\t\t});\n\n\t\t\treader.readAsDataURL(file);\n\t\t} else {\n\t\t\tsetShowImg(false);\n\t\t}\n\t};\n\treturn (\n\t\t<div className=\"form-img-container\" showImg>\n\t\t\t<div className=\"preview-container\">\n\t\t\t\t<img src={imge ? imge : ''} alt=\"Preview Image\" />\n\t\t\t\t<div style={{ display: `${showImg ? 'none' : 'block'}` }}>preview</div>\n\t\t\t</div>\n\n\t\t\t<input type=\"file\" name=\"inputFile\" onChange={getImg} />\n\t\t</div>\n\t);\n};\n\nexport default FormImgInput;\n","import React, { useState } from \"react\";\nimport FormInputs from \"./FormInputs/FormInputs\";\nimport FormImgInput from \"./FormImg/FormImg\";\nimport \"./styles/styles.css\";\nimport axios from \"axios\";\nconst url = \"https://educacion-remota.herokuapp.com/\";\n\nconst Form = () => {\n\tconst [formObject, setFormObject] = useState({});\n\n\tconst onFormInputChange = (atribute, value) =>\n\t\tsetFormObject({\n\t\t\t...formObject,\n\t\t\t[atribute]: value\n\t\t});\n\n\tconst handleImageUpload = image => {\n\t\tsetFormObject({ ...formObject, image });\n\t\tconsole.log(formObject);\n\t};\n\tconst onSubmit = target => {\n\t\taxios.post(`${url}/cards`, {\n\t\t\ttitle: formObject.title,\n\t\t\tsubtitle: formObject.subtitle,\n\t\t\tdescription: formObject.description,\n\t\t\tlink: formObject.link,\n\t\t\timage: formObject.image.base64string\n\t\t});\n\t};\n\n\treturn (\n\t\t<div className='form'>\n\t\t\t<FormInputs\n\t\t\t\ttitle={formObject.title}\n\t\t\t\tsubtitle={formObject.subtitle}\n\t\t\t\tdescription={formObject.description}\n\t\t\t\tlink={formObject.link}\n\t\t\t\tonChange={onFormInputChange}\n\t\t\t\tonSubmit={onSubmit}\n\t\t\t/>\n\t\t\t<FormImgInput handleImageUpload={handleImageUpload} />\n\t\t</div>\n\t);\n};\n\nexport default Form;\n","import React from \"react\";\nimport { Tarjetas } from \"./../index\";\n\nfunction Home() {\n\treturn (\n\t\t<>\n\t\t\t<div className='app-container'>\n\t\t\t\t<div>\n\t\t\t\t\t<Tarjetas />\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Tarjetas />\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Tarjetas />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className='app-container'>\n\t\t\t\t<div>\n\t\t\t\t\t<Tarjetas />\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Tarjetas />\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Tarjetas />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</>\n\t);\n}\n\nexport default Home;\n","import React from \"react\";\nimport \"./AppStyles/App.css\";\nimport { Navbar, Home, Form } from \"./Components\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n\treturn (\n\t\t<>\n\t\t\t<Navbar />\n\t\t\t<Router>\n\t\t\t\t<Route path='/' exact component={Home} />\n\t\t\t\t<Route path='/form' exact component={Form} />\n\t\t\t</Router>\n\t\t</>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}